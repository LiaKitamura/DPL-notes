Ruby -

Numbers & String : Ruby’s math and text objects
Methods : Methods like .reverse and symbolic methods like * are method actions
DataTypes : Time, :symbol, Date, Array, Strings, Fixnum, float,

to_s : converts things to strings
to_i : converts things to integers (numbers)
to_a : converts things to arrays
:simple word - when you put a simple word in front of a colon you get a symbol. symbols are cheaper then strings
nil : means there is nothing there.

\ : escape character. or use single quotes inside double quotes.
	EX : ‘ don \’ t do this’
easier to just use double quotes then you can use a single quote inside without issues
	EX : “don’t do this”

#{ } : string interpolation. use variable instead of concatenation. (preference though) any valid ruby code can go inside.
	EX : “1 + 1 =  #{1+1}”

prints out “1 + 1 =  2”

name = “Lia”
	EX : “Hello, “ + name + “ . How are you?”
	EX : “Hello, #{name}. How are you?”   <—- string interpolate

IMPORTANT : But using string interpolation you must use double quotes. single quotes will print out \#{name}

\n : new line character. manually putting something on the next line.
	EX : “Hello\nLia”
will print out :
	Hello
	Lia

IMPORTANT : this also must be used with double quotes not single. single quotes will print out “Hello\nLia”

   - Array -

http://apidock.com/ruby/Array

[ ] : empty array.
[“Jeremy”, “Will”, “Ty”] : this is considered a string array. each string is an index

you can even assign this array to a variable.
	EX : people = [“Jeremy”, “Will”, “Ty”]

puts storage[0] <— this prints out index 0
	=>Jeremy

IMPORTANT : array indexes always start with a 0. this is called 0 based indexing

.count : counts how many elements are in something.
	Ex : people

prints out 3

.length, .count, and .size are all the same

< < : shovel operator. this puts things into an array
	EX : people << “Soldier”

now soldier will be put at the end of the storage array
	EX : people = [“Jeremy”, “Will”, “Ty”, “Soldier”]

you can combine more << to add multiple items
	EX : people << “Soldier” << “Lia” << “and so on”


.each : is an array method

people.each do |person|    <—person can be named any variable name
	puts person                but is a local variable. cannot be used outside of this block
end

this will print out each person in the people array

block : a block starts with a do and end with end

multidimensional array : is an array inside of an array
	EX : things = [ [1,2.3], [4,5,6],  [ 9, 8,7] ]

to get something from the multidimensional array :
	puts things[0][1]

this will print out 2


Variables -

variable rules:

#1. all names should be lowercase
#2. begins with a letter
#3. separate words with an _ (underscore)

In Ruby anything can be assigned to a variable
EX : people = [“Jeremy”, “Will”, “Ty”]


Ruby has four types of variables:

local_variable = “hello” : can_be_anything = “hello”

@instance_variable = “Lia” : @

@@class_variable = “Human” : @@

$global_variable = “DO NOT USE” : $

Scope : local variables are only available locally. cannot got out of the local scope
	EX : [ [ [ [ [local] instance] class] ] global]


  - Hash -

http://apidock.com/ruby/Hash

{ } : a hash also used for a collection of things. can use double or single quotes.
	EX : storage = {“Box 1” => “Stuff”, “Box 2” => “More Stuff”}

and like an array can have a hash inside a hash.
	EX : storage = {“Box 1” => “Stuff”, “Box 2” => “More Stuff”, “Box 3 => [“box”, “of”, “stuff” ] }

puts storage[“Box 1”]
	>”Stuff”

IMPORTANT : does not use 0 based index. its is a key based index. Uses Keys and Values.

IMPORTANT : in a hash you must reference the key exactly how its been written. keys can be anything. but each key also has to be unique. keys are case sensitive

storage.each_pair do | key, value |
	puts “The key is #{key} and the value is #{value}”
end

	>The key is Box 1 and the value is Stuff
	>The key is Box 2 and the value is More Stuff
	>The key is Box 3 and the value is [box, of, stuff]

 :name : a data type of symbol, just like array, string are data types… used where you might use a string. used mostly in hashes. a symbol might be used for the key instead. convention in a symbol is all lowercase.

	EX : me = {:name => “Lia”, :age => 26}
		puts me[:name]
		>”Lia”

to set a value and add to the hash you cannot use << like in an array. must manually set.
	EX : me[:sex] = “female”

IMPORTANT : can’t have  -  (dashes) in variables  and hashes



When to use a Hash vs Array

Array : use an array when you have a generic collection of things you want to do something to everything.
	EX : dog = [1, “happy”, 8, “no”, “lab”]

Hash :  when you want each object in your collection to have a specific name
	EX : dog = [
		   {:breed => ‘lab’, :name => ‘happy’, :command => ’no’},
		   {:breed => ‘mutt’, :name => ’sad’, :command => ’yes’}
		]


Time data type :

somethings you can do :

	Time.now
	Time.now.year
	Time.now.hour
	Time.now.min

current_year = Time.now.year

	puts current_year

>2014


! = is destructive. will change the original object

EX : wow = "WOW"
prints "WOW"

but use ! and it will change

EX : wow.downcase!
prints "wow"

and if you print the variable wow it will have changed into wow = "wow"



TERNARY OPERATOR :

x = 4
y= 5

simpler way of doing an if else statement

if x is less that y its prints "YEAH!" else it prints "nope"

x < y ? "YEAH!" : "nope"
=>"YEAH!"

result = x < y ? "YEAH!" : "nope"

result
=> "YEAH!"


DATE METHOD :

needs to link up with a file.
require 'date'

NAMING CONVENTION :

in a module each module name is uppercase. when saving file seperate each word with _



I/O : means input output.
	reading a file then writing a file.
Input : gets
Output : puts



Dir.pwd : using terminal this command will do the same as pwd outside of terminal.
	this shows the file directory path

Dir.glob("*.rb") : gathers up all the files in this dir we are using a * to represent a placeholder that
	means any files ending in rb. and will have a list of files in an array

system("ls") : lists, "pwd"

` these are called backticks
`` tells ruby to run a system command

name = "Lia"
`say -v "Good News" "Hello #{name}"`

File.exists?(" filename") : whether or not a file actually exists in current directory I am in
		also you can use exists? with Dir
Dir.exists?(" foldername")

Dir.chdir("")

File.basename("car.rb")
=> "car.rb"

"#{Dir.pwd}/car.rb"
=> returns the file path

File.extname("logo.jpg")
=> ".jpg"

File.join("Users, "Lia", "Desktop"): build directory structure.if you don't know where to put / and stuff
=>"Users/Lia/Desktop"


creating a new file :
	when creating a new file you need to specify the mode

"r" : read-onlu
"r+" : file has to be already existing. and has text
"w" : write-only. deletes existing file and
"w+" : if file does not exist we will create new one and open it. if file has stuff in it and you open it
	it will delete everything
"a" : write-only. starts at end of file if exists.
"b" : binary file mode



new_file = File.new("first_file.txt, "modehere")   <--creates new file
new_file.write("hello")     <-writes to file
=> 5    <-- this Fixnum means total numbers of files for the line

IMPORTANT:
once you open the file you have to close it when you are done. there are issues if you don't do this

new_file.close

filename.eof? : means end of file
=> true or false

new line character \n has to use double quotes " \n"

filename.rewind : will start back at the top then you can use filename.readline

new_file.readline unless new_file.eof? : helps to prevent errors


GEMS :

a gem is whats known as a library. a library is a prepackaged code that
	someone else wrote for you and you can you can use it in your program

Rails is a gem.


Gosu : 2d video game framework
Shoes : cross platform desktop application builder
Chef : multi server management and deployer
Highline : Rubygem for terminal based applications
Waves : 3D video game development in ruby
Ruby as a utility


DSL :

Domain Specific Language
ruby has the ability to create dsl really easy

require 'dpl_cooking'

# when cook is done serve eggs
cook('eggs') do
	# eggs are done cooking
	puts 'serving eggs'
end

# doing this is much easier then doing this:

chef = Chef.new
eggs = chef.cook('eggs')
while eggs.still_cooking?
	puts 'still cooking eggs'
	break if eggs.cooked?
end
puts 'serving eggs'


cook('bacon', style: 'extra crispy') do
	puts 'serving bacon'
end

cook('toast', style: 'light golden', add: 'butter') do
	puts 'serving toast'
end


WEBSITES:

A collection of files. Documents that the browser reads
generally pretty static.

RVM :

Ruby Version Manager
RVM

manages versions of ruby

by creating a .ruby-gemset file we can lock in the version of ruby being used
so you don't get version conflicts when using gems. you don't have to worry
about remembering when i'm in this project i need to use this ruby version and if i'm in this project i need to use another one.

the first time you rvm you cd back one and then go back into folder created so rvm can create what it needs to

PRY :

gem 'pry'
require 'pry'

add binding.pry
refresh your page and switch to terminal should be working
