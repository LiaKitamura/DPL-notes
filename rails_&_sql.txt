
              --------------- RAILS & SQL -----------------

                This section is focusing on M in MVC

// model : thing you are modeling after in a real world object
// the name of model is the singular version of that thing
  EX : Student, Animal, Car
// models are ruby classes

// models have attributes and thats what describes these models. each of these attributes have a specific format. integer, boolean...
// attributes for model is just the column name
// table name is a pluralized version of the model name.
  EX : Students, Animals, Cars
// don't need to define attr_accessor because rails does it for us


  ------------ THINGS TO KNOW ABOUT CREATING MODELS AND STUFF ---------------

1. activerecordbase: adds the attr_accessor

2. rails creates tables and adds primary key for us

3. when you create a model it creates a migration automatically for us

4. seed file : sets default data we want to use in db

5. the create method : instantiates the class, sets it up and saves it

6. don't need to assign a variable unless you are doing something with that variable

7. **// migration: used for adding, removing columns etc \\**

8. **/// Data input into rails console is added to the database ///**

    ------------------------ Creating a Model -------------------------

  ***// never touch the schema.rb file. But it is a good reference for what is in your tables and shows the attributes, datetypes, and modifiers //***

// when creating new projects
1. rails new sandbox -d postgresql

// cd into with
2. cd sandbox/

// creating model
3. rails generate model Animal

// open
4. atom .


-------------------------------- SQL Types -------------------------------------
:binary
:boolean
:date
:datetime
:decimal
:float
:integer
:primary_key
:string
:text
:time
:timestamp

// in db folder find migrate file and add :
**// instead of typing column and varchar() you can do it like : //**
  --  t.string :name
  --  t.string :breed, limit: 100

// so to set columns and modifiers
5.  t.string :name, null: false
    t.string :breed, limit: 100
    t.string :species
    t.integer :age, default: 1

// in config/database.yml under development
6. host: localhost

// in terminal
7. rake db:create
8. rake db:migrate

// go into development to make sure model got all set up with \d
9. psql -d sandbox_development
  9.1 \d



    ------------- Migration file to add columns if necessary ---------------

// adding a migration file
10. rails g migration add_columns_to_animals

// now add column
**// adding to :animals table with new column :hungry, datatype of :boolean for hungry, default: true //**
11. add_column :animals, :hungry, :boolean, default: true
    add_column :animals, :born_on, :date

// anytime you make changes you have to rake db:migrate
12. rake db:migrate



    ------------ Migration file to remove/rename columns ---------------

**// once you migrate can't make changes to that file. if you need to add or remove you just create another migration //**
13. rails g migration change_columns_for_animals

// in your migration file you just created and you wan't to make changes like : renmaing, adding or removing columns you would do it by :
14. remove_column :animals, :hungry
    rename_column :animals, :born_on, :birthday
    add_column :animals, :trained, :boolean, default: false



        --------------- Deleting/Rollbacks ----------------

    **// rails destroy model name or rails destroy migrate name \\**

// checks to see if its 'up' if it is, you can rollback. if it is 'down', already been rolled back use rake db:migrate:status
    **// rake db:migrate:status //**

// rolls back migration and deletes all data.
    **// rake db:rollback //**

// deleting all data in database //
  **// rake db:drop //**
// this deletes database but not actual files so you do NOT need to RECREATE //
  **// rake db:create //**
  **// rake db:migrate //**
  **// rake db:seed //** if you messed up the seed also if not omit this



      ------------- Adding Values to your Attributes --------------

// adding data to db. go find db/seeds.rb
15. Animal.create(name: "Fluffy", breed: "Poodle", species: "Dog", age: 3, birthday: 3.years.ago, trained: true)

// to actually do something with the database in rails you need to:
16. rake db:seed

// now you can play with it in rails console



        ---------------- ActiveRecord::Relation ----------------

// go into console
1. rails c

// now you can call Animal with :
2. Animal.first
   Animal.count

// ActiveRecord::Relation object allows us to chain queries together
3. Animal.where(name: "Fluffy").limit(1)
   Animal.where(name: "Fluffy", age: 2).count

// to run sql commands in rails console
4. Animal.where("name = 'Fluffy'")
   Animal.where("name like 'Fluffy%'")

// using string interpolation with an external source and pass into here
5. name = "fluffy"
   Animal.where("lower(name) like '#{name}%'")
// !! shouldn't mix ruby with raw sql though because it is vulnerable to sql injection. this enables users to access the database and do what they want !! //

 *// rails came up with a way to protect against this with placeholder of ? //*
 -// for each ? placeholder you add additional arguments to the where clause //-
6. name = "kitters"
   Animal.where("lower(name) like ?", "#{name}%")

    // more examples
   Animal.where("birthday < ?", 1.year.ago)

// adding multiple ??
7. Animal.where("birthday < ? and name = ?", 1.year.ago, "Fluffy")

// chaining ActiveRecords
8. Animal.where("birthday < ?", 1.year.ago).where(name: "Fluffy")



        ------------------------- SCOPE -------------------------

// go to app/models/animal.rb
// when you write scopes you always write them as class level methods

1. def self.trained
     where(trained: true)
   end

// we can now just run Animal.trained in rails console
2. Animal.trained

// since its an ActiveRecord::Relation we can chain stuff to it
3. Animal.trained.where('birthday < ?', 1.year.ago)

// add
4. def self.cats
     where('LOWER(species) = ?', 'cat')
   end

// now in rails console you can now just do:
5. Animal.cats

// and also
6. Animal.trained.cats



          ---------------- JOIN TABLES FAQ -----------------

it is called relational database because it can be related in some form

  ----- 3 types of relations -----

// table A belongs to only table B and table B only belongs to table A
1. one - one

// table A has many and belongs to table B but table B only belongs to table A
2. one - many

// table A has many and belongs to table B and table B has many  and belongs to table A
3. many - many


      ----------------------- JOINING TABLES -------------------------

// in terminal
1. rails g model Trainer

// in new trainer model add
2. t.string :name

// creating migration
  //add stuff to migration file. save
3. rails generate migration add_trainer_id_to_animals

4. rake db:migrate


          ---------- SETUP ASSOCIATION BETWEEN FILES ----------

// to associate between models app/models/trainer.rb and animal.rb

// in trainer.rb add
5. has_many :animals

//in animal.rb add
6. belongs_to :trainer

// to have a cleaner fail message
7. def trainers_name
     if trainer.present?
       trainer.name
     else
       'I have no trainer'
     end
   end

// the present? does the opposite of nill. which is not nill



    ---------------------- RAILS OVERVIEW ----------------------

0. rails new project -d postgresql
0.1 cd new project

// creating model Student with columns of first_name, last_name, and state
1. rails generate model Student first_name last_name state

// open with
2. atom .

// make changes or check its correct
3. rake db:migrate

// creating migration
4. rails generate migration AddsFavoriteColorToStudent

//go into file add columns and such. save
5. add_column :students, :favorite_color, :string

// finished changes and saved
6. rake db:migrate

// go into console. should be empty table since nothing has been inputed yet
7. rails c > Student.all

// filling it with data
8. rails c > Student.create(first_name: 'Jason', last_name: "Carter", state: "Washington", favorite_color: "purple")


// now you can do stuff like :

rails c > Student.first
rails c > Student.last
rails c > Student.last.destroy
// .find_by will find the first query that matches condition //
rails c > Student.find_by_id
// .where will find all that match //
rails c > Student.where(favorite_color: 'Purple')
rails c > Animal.find_by_species('Dog')
rails c > Animal.table_name


// Error Messages //

// in rails console

begin
  animal = Animal.find(50)
    resuce ActiveRecord::RecordNotFound  <-- Whatever error you have goes here
  puts "could not load animal"
end


********************************************************************************
********************************************************************************

------------------------------ CONTROLLERS -------------------------------------

// Controllers are Ruby classes but not used like Ruby classes.

1. Controllers job is to talk to the Model.
2. Model talks to the DB. Model sends back info to Controller.
3. Controller sends it to View

  // Resource is based on Whatever your model is.


                            Animal RESOURCE

                    Animal        Animals          Animals
                    Model <----- Controller <------ Views
                      |   ------>           ------>
                      |
                      DB


routes : the -----> is called the routes.

/products : is pluralized so the route is saying all products

/products/:id : refers to a specific params id in products



--------------------------------------------------------------------------------

// making your app
1. rails new dpl_store -d postgresql
2. cd dpl_store/

// made git repo and made develop branch. so you have a clean master branch

// generating model in develop branch
3. (branch) > rails g model Product

// open
4. (branch) > atom .

// in atom go to db/migrate/abunchofnumbers_create_products.rb add your column names like :
  EX :
    t.string :name, null: false
    t.float :price, default: 0.0
    t.string :sku
    t.boolean :in_stock, default: true
    t.text :description

5. add columns
   save

// in config/database.yml
6. host: localhost

// back in terminal you can now
7. rake db:create
8. rake db:migrate

// keep github up to date
    git add config/database.yml
    git commit -m 'updated dev db settings'
    git add -A
    git commit -m 'added a product model'
    git push origin develop
//

// in db/seeds.rb add
9. Product.create(stuff: 'stuff', )
   save

// back into develop branch
10. rake db:seed

// you can git add to keep git up to date
git add db/seeds.rb
git commit -m 'updated products'
//

// when naming controllers use the pluralized version
11. rails generate controller products

/*/ all methods in the controller are called 'actions'

// config/routes.rb or cmd-t routes add resources
/*/ this generates routes for us
12. resources :products

// in terminal to see the routes
13. rake routes.

/*/ you might see something like this :

EX :


Prefix Verb   URI Pattern                  Controller#Action
    products GET    /products(.:format)          products#index
             POST   /products(.:format)          products#create
                                ^^ this is an optional parameter
 new_product GET    /products/new(.:format)      products#new
edit_product GET    /products/:id/edit(.:format) products#edit
                              ^^ this is a required parameter
                              EX : edit_product_path(1)
                        // the EX will return the string '/products/1/edit'
     product GET    /products/:id(.:format)      products#show
             PATCH  /products/:id(.:format)      products#update
             PUT    /products/:id(.:format)      products#update
             DELETE /products/:id(.:format)      products#destroy


all of these are all relative urls ^^^^^
all related to products controller

prefix column : its the prefix to an action. this action will return a string that is the pattern. each prefix has a _path and _uri
  EX : products_path
       products_uri

verb column : http verbs. relates to something you are trying to do.
  Get : have a new file in view for each Get. if you have 4 Gets you have 4 views file.
  Post : create a new resource
  Patch : taking resource and patching it
  Put : updating an entire resource

uri pattern column : inside pattern anything inside () is optional. if it is not optional you must supply that value.
  the : references a variable for the pattern.
  . just means a dot like in a url
    EX :
      products.html
  the :format is a variable

controller_action column : what controller this route handles to the right of # specifies the action controller takes.



creates seven different routes in your application, all mapping to the Photos controller:

HTTP Verb  	Path	       Controller#Action	      Used for
GET	      /photos	       photos#index	      display a list of all photos
GET	     /photos/new	    photos#new	        return an HTML form for creating a new photo
POST	    /photos	        photos#create	     create a new photo
GET	    /photos/:id	     photos#show	       display a specific photo
GET	    /photos/:id/edit	photos#edit	       return an HTML form for editing a photo
PATCH/PUT  /photos/:id	   photos#update	      update a specific photo
DELETE	 /photos/:id	     photos#destroy       delete a specific photo






/*/ its possible to have more then one index page. but in its own folders
  EX : products/index.html.erb
       site/index.html.erb
       index.html.erb

// start the rails server
14. rails s

// apps/views/products/
// create index.html.erb
15. add something like :

    <h1>Products Page</h1>
    <ul>
    <% @products.each do |product| %>
      <li>
        <%= product.name %>
        <%= number_to_currency(product.price) %>
      </li>
    <% end %>
    </ul>

// apps/controllers/products_controller.rb
  /*/ making an action for index in the controller makes it so it is now associated with the index page you just created above and runs it

16.
    def index
      @products = Product.all
    end

/*/ you can go to localhost:3000/products to check it out

// in products controller make a method for show

17.
  def show
    @product = Product.find(params[:id])
  end

// since show is a 'get' make another file in views folder
18. show.html.erb

    <h1><%= @product.name %></h1>
    <h3><%= number_to_currency(@product.price) %></h3>
    <p>SKU: <%= @product.sku %></p>
    <div>
      <%= @product.description %>
    </div>

    <%= link_to('Back to all products', products_path) %>


// adding a form
  // add your action in controller.
19.
    def new
      @product = Product.new
    end

// new is a 'get' so make new file in views
20.
  new.html.erb

    <h1>Make a new product</h1>

    <%= form_for(@product) do |f| %>
      <div>
        <%= f.label(:name) %>
        <%= f.text_field(:name) %>
      </div>
      <div>
        <%= f.submit('Save Product') %>
      </div>
    <% end %>

// to put the inputed form data into DB (but should do strong params below)
  // this is not a 'get' so no new file in views
21.
  def create
    @product = Product.create(params[:product])
    redirect_to products_path
  end

// to see what is in the params hash we could do a raise. then try to run page.
  // and the error page shows you the hash you can access
  def create
      raise params.inspect  <---- raise like so
      @product = Product.create(params[:product])
      redirect_to products_path
    end


----- Using Strong parameters ------

// everything below private cannot be accessed outside of its class. you can also think of the methods now as actual methods. rather then actions like above.

// to have strong parameters instead you would do this :
21.5

  def create
    @product = Product.new(product_params)   <-- changed here
    if @product.save
      redirect_to products_path     <-- this runs your validation. if it fails
    else                                it doesn't save and goes straight to
      render :new                       the else
    end
  end

// adding your validations
  // find app/models/product.rb and add this :
22. validates :name, presence: true

/*/ other types of validations :
      validates :email, uniqueness: true
      validates :password, min_length: 6
      validates :url, format: SOME_URL_REGEX

// then also add a method under private
23.

private

  def product_params
    params.require(:product).permit(:name)  <-- this is the strong param
  end



  --- helper methods ---

link_to :
<%= link_to(product.name, product_path(product.id)) %>

number_to_currency :
  <h3><%= number_to_currency(@product.price) %></h3>

to protect against HTML injection -
  add .html_safe to safe string
  <%= link_to('&laquo; Back to all products'.html_safe, products_path) %>

form_for() :
  creates form for you with safety features

pluralize:
  <h1>Showing <%= pluralize(@products.count, 'Product') %></h1>

--------------------------------------------------------------------------------

index
<%= link_to('edit', edit_product_path(product.id)) %>
        shows ^      ^ prefix ^path


products controller
def edit
  @product = Product.find(params[:id])
end


views/
edit.html.erb

<h1>Edit <%= @product.name %></h1>
                  ^ this makes product dynamic

<%= form_for(@product) do |f| %>
  <div>
    <%= f.label(:name) %>
    <%= f.text_field(:name) %>
  </div>
  <div>
    <%= f.submit('Update') %>  <-- only difference from other form
  </div>
<% end %>


controller
// this is not a gets so no new page needed. that means it either renders or puts
// ActiveRecord models has an update_attributes

  def update
    @product = Product.find(params[:id])
    if @product.update_attributes(product_params)
      redirect_to products_path
    else
      render :edit
    end
  end

// links can only do a get. can't do a delete. we need to do some javascript - method: :delete

index
-- <%=link_to('delete', product_path(product.id), method: :delete, confirm: 'Are you sure?') %>

controller
def destroy
    @product = Product.find(params[:id])
    @product.destroy
    redirect_to products_path
  end



filters or hooks allows us to do specific things in a particular order. you can tell the controller to run code before or after an action
  EX hook : before_action

at the top of controller :
before_action :find_product, only: [:show, :edit, :update, :destroy]

under private :

  def find_product
    @product = Product.find(params[:id])
  end
end

// you can now remove repetitive code from the show, edit, update, and destroy actions



-------- making a homepage ----

creating a separate controller for our homepage

rails g controller site

routes.rb
root 'site#index'

site_controller

  def index

  end

views/site/
index.html.erb


app/views/layouts/application.html.erb

  <body>
    <div id="wrapper">
      <header>
        <nav>
          <%= link_to('Home Page', root_path) %>
          <span>&nbsp;|&nbsp;</span>
          <%= link_to('View Products', products_path) %>
        </nav>
      </header>
      <section>
        <%= yield %>
      </section>
      <footer>
        copyright &copy; <%= Time.now.year %>
      </footer>
    </div>
  </body>


add styling
app/assets/stylesheets/application.css


add images
// save img in app/assets/site/index.html.erb
<%= image_tag('mush.jpg', size: '100x100') %>

background img
also save in stylesheets
then in

body {
background: transparent url('fresh_snow.png') repeat scroll center center ;
}
#main-content {
  background-color: white;
  padding: 20px;
}


products/index.html.erb
<h1>Showing <%= pluralize(@products.count, 'Product') %></h1>
Created <%= time_ago_in_words(product.created_at) %> ago



creating your own helper
helper/application_helper
def show_notice_message
  unless flash.empty?
    [:notice, :alert].each do |key|
      return content_tag(:div, flash[key], class: "flash-#{key}") if flash[key].present?
      end
    end
  end

flash = a global hash. stores values and keys
you can store 2 different keys
values will be actual message


products controller
add flash in create if statement
if
  flash[:notice] = 'Good Job! You did it.'
else
  flash[:alert] = 'Bad job! You failed.'


// in order to use it you have to put it somewhere
views/layouts/application.html.erb
<%= show_notice_message %>




------- about page --------

config/routes.rb

get '/about' => 'site#about'

// rails has made an about path in rake routes

views/layouts/application add the link
<%= link_to('About DPL Store', about_path) %>

controller/site_controller
def about

end


making another model
rails g model car year:integer make:string model:string
rake db:migrate

// in rails c added values to cars


add to the site controller
def index
  @products = Product.all
  @cars = Car.all
end


views/site/index.html

<div class="left-column">
  <h2>Our Products</h2>
  <% @products.each do |product| %>
    <div class="product">
      <%= product.name %>
    </div>
  <% end %>
</div>

<div class="right-column">
  <h2>Our Cars</h2>
  <% @cars.each do |car| %>
    <div class="car">
      <%= car.year %> <%= car.make %> <%= car.model %>
    </div>
  <% end %>
</div>
<br clear='all'/>
